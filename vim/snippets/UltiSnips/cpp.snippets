snippet cl "Class"
class ${1:`!p snip.rv = snip.basename`} 
{
    public:
        $1(${2});
        ${3:virtual }~$1();
    private:
        ${4}
};${0}
endsnippet

snippet unm "Unordered Map" i
std::unordered_map<${1:Key}, ${2:Val}>${0}
endsnippet

snippet ctor "Constructor"
${1:ClassName}::$1(${2:${3:type} ${4:param}})${5: : ${6}}
{
    ${7}
}${0}
endsnippet

snippet dtor "Destructor"
${1:ClassName}::~$1()
{
    ${2}
}${0}
endsnippet

snippet /* "C-style Block Comment"
/* ${0} */
endsnippet

snippet cout "Cout"
${1:std::}cout << ${2} << ${3:$1endl};${0}
endsnippet

snippet vec "Vector"
std::vector<${1:type}> ${2:name}
endsnippet

snippet scast "Static Cast"
static_cast<${1}>(${2})${0}
endsnippet

snippet rcast "Reinterpret Cast"
reinterpret_cast<${1}>(${2})${0}
endsnippet

snippet dcast "Dynamic Cast"
dynamic_cast<${1}>(${2})${0}
endsnippet

snippet ccast "Const Cast"
const_cast<${1}>(${2})${0}
endsnippet

snippet fn "Function"
${1:void} ${2:function}(${3})
{
    ${0}
}
endsnippet

snippet fnd "Function Declaration"
${1:void} ${2:function}(${3});${0}
endsnippet

snippet sw "Switch Statement"
switch (${1:expression})
{
    case ${2:const}:
	    ${3}
		break;
}${0}
endsnippet

snippet ca "Case"
case ${1:const}:
    ${2}
	break;${0}
endsnippet

snippet if "If Condition"
if (${1:true})
{
    ${2}
}${0}
endsnippet

snippet el "Else"
else 
{
    ${1}
}${0}
endsnippet

snippet elif "Else If"
else if (${1:true})
{
    ${2}
}${0}
endsnippet

snippet wh "While Loop"
while (${1:true})
{
    ${0}
}
endsnippet

snippet for "For Loop"
for (${1:auto} ${2:i} ${3:= 0}; ${4}; ${5:++$2})
{
    ${6}
}${0}
endsnippet

snippet fore "For Each Loop"
for (${1:auto} ${2:elt} : ${3:container})
{
    ${4}
}${0}
endsnippet

snippet tem "Template"
template <typename ${1:T}>
endsnippet

snippet pu
public:
    ${0}
endsnippet

snippet pr
private:
    ${0}
endsnippet

snippet pro
protected:
    ${0}
endsnippet

snippet inc "Include"
#include <${1:file}>
endsnippet

snippet uns "Using Namespace"
using namespace ${1:std};${0}
endsnippet

snippet str "String" i
std::string 
endsnippet

snippet ma "Main Function" 
int main(int argc, char *argv[])
{
    ${0}
	return 0;
}
endsnippet
